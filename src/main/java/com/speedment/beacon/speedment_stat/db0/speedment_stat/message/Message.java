package com.speedment.beacon.speedment_stat.db0.speedment_stat.message;

import com.speedment.beacon.speedment_stat.db0.speedment_stat.message_item.MessageItem;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.message_item.MessageItemField;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.message_item.MessageItemManager;
import com.speedment.core.core.entity.Entity;
import com.speedment.core.manager.metaresult.MetaResult;
import com.speedment.util.json.Json;
import java.lang.Long;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.message'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
@Entity(managerType = MessageManager.class,
        builderType = MessageBuilder.class,
        primaryKeyType = Long.class)
public interface Message {
    
    Long getId();
    
    Timestamp getCreated();
    
    String getIpAddress();
    
    Optional<String> getIpAddressName();
    
    Integer getRemotePort();
    
    Optional<String> getGui();
    
    Optional<String> getCoreFullVersion();
    
    Optional<String> getSessionId();
    
    Optional<String> getVersion();
    
    Optional<String> getType();
    
    Optional<String> getRegId();
    
    default Stream<MessageItem> messageItemsByMessage() {
        return MessageItemManager.get()
                .stream().filter(MessageItemField.MESSAGE.equal(this.getId()));
    }
    
    default Stream<MessageItem> messageItems() {
        return messageItemsByMessage();
    }
    
    static MessageBuilder builder() {
        return MessageManager.get().builder();
    }
    
    default MessageBuilder toBuilder() {
        return MessageManager.get().toBuilder(this);
    }
    
    default String toJson() {
        return MessageManager.get().toJson(this);
    }
    
    default String toJson(Json<Message> json) {
        return json.build(this);
    }
    
    static Stream<Message> stream() {
        return MessageManager.get().stream();
    }
    
    default Optional<Message> persist() {
        return MessageManager.get().persist(this);
    }
    
    default Optional<Message> update() {
        return MessageManager.get().update(this);
    }
    
    default Optional<Message> remove() {
        return MessageManager.get().remove(this);
    }
    
    default Optional<Message> persist(Consumer<MetaResult<Message>> listener) {
        return MessageManager.get().persist(this, listener);
    }
    
    default Optional<Message> update(Consumer<MetaResult<Message>> listener) {
        return MessageManager.get().update(this, listener);
    }
    
    default Optional<Message> remove(Consumer<MetaResult<Message>> listener) {
        return MessageManager.get().remove(this, listener);
    }
}