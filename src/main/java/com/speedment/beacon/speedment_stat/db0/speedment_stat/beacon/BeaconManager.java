package com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon;

import com.speedment.core.config.model.Column;
import com.speedment.core.config.model.Table;
import com.speedment.core.manager.sql.SqlManager;
import com.speedment.core.platform.Platform;
import com.speedment.core.platform.component.ManagerComponent;
import com.speedment.core.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Long;
import java.lang.String;
import java.sql.Timestamp;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.beacon'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface BeaconManager extends SqlManager<Long, Beacon, BeaconBuilder> {
    
    @Override
    default Long primaryKeyFor(Beacon entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.speedment_stat.beacon");
    }
    
    @Override
    default Class<BeaconManager> getManagerClass() {
        return BeaconManager.class;
    }
    
    @Override
    default Class<Beacon> getEntityClass() {
        return Beacon.class;
    }
    
    @Override
    default Class<BeaconBuilder> getBuilderClass() {
        return BeaconBuilder.class;
    }
    
    @Override
    default Object get(Beacon entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "created" : return entity.getCreated();
            case "ipAddress" : return entity.getIpAddress();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(BeaconBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Long) value); break;
            case "created" : entity.setCreated((Timestamp) value); break;
            case "ipAddress" : entity.setIpAddress((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static BeaconManager get() {
        return Platform.get().get(ManagerComponent.class).manager(BeaconManager.class);
    }
}