package com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon_property;

import com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon.Beacon;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon_property_key.BeaconPropertyKey;
import com.speedment.core.field.reference.ComparableReferenceForeignKeyField;
import com.speedment.core.field.reference.string.StringReferenceField;
import javax.annotation.Generated;
import static com.speedment.core.field.FieldUtil.findColumn;

/**
 * Interface representing the fields of an entity.
 * 
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public final class BeaconPropertyField {
    
    public final static ComparableReferenceForeignKeyField<BeaconProperty, Long, Beacon> BEACON = new ComparableReferenceForeignKeyField<>(() -> findColumn(BeaconProperty.class, "beacon"), BeaconProperty::getBeacon, BeaconProperty::findBeacon);
    public final static ComparableReferenceForeignKeyField<BeaconProperty, Integer, BeaconPropertyKey> KEY = new ComparableReferenceForeignKeyField<>(() -> findColumn(BeaconProperty.class, "key"), BeaconProperty::getKey, BeaconProperty::findKey);
    public final static StringReferenceField<BeaconProperty> VALUE = new StringReferenceField<>(() -> findColumn(BeaconProperty.class, "value"), o -> o.getValue().orElse(null));
    
    private BeaconPropertyField() {
        
    }
}