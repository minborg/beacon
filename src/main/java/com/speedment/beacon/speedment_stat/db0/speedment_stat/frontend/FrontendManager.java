package com.speedment.beacon.speedment_stat.db0.speedment_stat.frontend;

import com.speedment.core.config.model.Column;
import com.speedment.core.config.model.Table;
import com.speedment.core.manager.sql.SqlManager;
import com.speedment.core.platform.Platform;
import com.speedment.core.platform.component.ManagerComponent;
import com.speedment.core.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.sql.Timestamp;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.frontend'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface FrontendManager extends SqlManager<Long, Frontend, FrontendBuilder> {
    
    @Override
    default Long primaryKeyFor(Frontend entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.speedment_stat.frontend");
    }
    
    @Override
    default Class<FrontendManager> getManagerClass() {
        return FrontendManager.class;
    }
    
    @Override
    default Class<Frontend> getEntityClass() {
        return Frontend.class;
    }
    
    @Override
    default Class<FrontendBuilder> getBuilderClass() {
        return FrontendBuilder.class;
    }
    
    @Override
    default Object get(Frontend entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "regId" : return entity.getRegId();
            case "first_name" : return entity.getFirstName();
            case "last_name" : return entity.getLastName();
            case "email" : return entity.getEmail();
            case "organization" : return entity.getOrganization();
            case "country" : return entity.getCountry();
            case "phone" : return entity.getPhone();
            case "version" : return entity.getVersion();
            case "coreFullVersion" : return entity.getCoreFullVersion();
            case "created" : return entity.getCreated();
            case "ipAddress" : return entity.getIpAddress();
            case "ipAddressName" : return entity.getIpAddressName();
            case "remotePort" : return entity.getRemotePort();
            case "comment" : return entity.getComment();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(FrontendBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Long) value); break;
            case "regId" : entity.setRegId((String) value); break;
            case "first_name" : entity.setFirstName((String) value); break;
            case "last_name" : entity.setLastName((String) value); break;
            case "email" : entity.setEmail((String) value); break;
            case "organization" : entity.setOrganization((String) value); break;
            case "country" : entity.setCountry((String) value); break;
            case "phone" : entity.setPhone((String) value); break;
            case "version" : entity.setVersion((String) value); break;
            case "coreFullVersion" : entity.setCoreFullVersion((String) value); break;
            case "created" : entity.setCreated((Timestamp) value); break;
            case "ipAddress" : entity.setIpAddress((String) value); break;
            case "ipAddressName" : entity.setIpAddressName((String) value); break;
            case "remotePort" : entity.setRemotePort((Integer) value); break;
            case "comment" : entity.setComment((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static FrontendManager get() {
        return Platform.get().get(ManagerComponent.class).manager(FrontendManager.class);
    }
}