package com.speedment.beacon.speedment_stat.db0.speedment_stat.frontend;

import com.speedment.core.field.reference.ComparableReferenceField;
import com.speedment.core.field.reference.string.StringReferenceField;
import java.sql.Timestamp;
import javax.annotation.Generated;
import static com.speedment.core.field.FieldUtil.findColumn;

/**
 * Interface representing the fields of an entity.
 * 
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public final class FrontendField {
    
    public final static ComparableReferenceField<Frontend, Long> ID = new ComparableReferenceField<>(() -> findColumn(Frontend.class, "id"), Frontend::getId);
    public final static StringReferenceField<Frontend> REGID = new StringReferenceField<>(() -> findColumn(Frontend.class, "regId"), o -> o.getRegId().orElse(null));
    public final static StringReferenceField<Frontend> FIRSTNAME = new StringReferenceField<>(() -> findColumn(Frontend.class, "first_name"), o -> o.getFirstName().orElse(null));
    public final static StringReferenceField<Frontend> LASTNAME = new StringReferenceField<>(() -> findColumn(Frontend.class, "last_name"), o -> o.getLastName().orElse(null));
    public final static StringReferenceField<Frontend> EMAIL = new StringReferenceField<>(() -> findColumn(Frontend.class, "email"), o -> o.getEmail().orElse(null));
    public final static StringReferenceField<Frontend> ORGANIZATION = new StringReferenceField<>(() -> findColumn(Frontend.class, "organization"), o -> o.getOrganization().orElse(null));
    public final static StringReferenceField<Frontend> COUNTRY = new StringReferenceField<>(() -> findColumn(Frontend.class, "country"), o -> o.getCountry().orElse(null));
    public final static StringReferenceField<Frontend> PHONE = new StringReferenceField<>(() -> findColumn(Frontend.class, "phone"), o -> o.getPhone().orElse(null));
    public final static StringReferenceField<Frontend> VERSION = new StringReferenceField<>(() -> findColumn(Frontend.class, "version"), o -> o.getVersion().orElse(null));
    public final static StringReferenceField<Frontend> COREFULLVERSION = new StringReferenceField<>(() -> findColumn(Frontend.class, "coreFullVersion"), Frontend::getCoreFullVersion);
    public final static ComparableReferenceField<Frontend, Timestamp> CREATED = new ComparableReferenceField<>(() -> findColumn(Frontend.class, "created"), Frontend::getCreated);
    public final static StringReferenceField<Frontend> IPADDRESS = new StringReferenceField<>(() -> findColumn(Frontend.class, "ipAddress"), Frontend::getIpAddress);
    public final static StringReferenceField<Frontend> IPADDRESSNAME = new StringReferenceField<>(() -> findColumn(Frontend.class, "ipAddressName"), Frontend::getIpAddressName);
    public final static ComparableReferenceField<Frontend, Integer> REMOTEPORT = new ComparableReferenceField<>(() -> findColumn(Frontend.class, "remotePort"), Frontend::getRemotePort);
    public final static StringReferenceField<Frontend> COMMENT = new StringReferenceField<>(() -> findColumn(Frontend.class, "comment"), o -> o.getComment().orElse(null));
    
    private FrontendField() {
        
    }
}