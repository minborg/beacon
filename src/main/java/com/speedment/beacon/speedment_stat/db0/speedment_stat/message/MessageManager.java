package com.speedment.beacon.speedment_stat.db0.speedment_stat.message;

import com.speedment.core.config.model.Column;
import com.speedment.core.config.model.Table;
import com.speedment.core.manager.sql.SqlManager;
import com.speedment.core.platform.Platform;
import com.speedment.core.platform.component.ManagerComponent;
import com.speedment.core.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.sql.Timestamp;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.message'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface MessageManager extends SqlManager<Long, Message, MessageBuilder> {
    
    @Override
    default Long primaryKeyFor(Message entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.speedment_stat.message");
    }
    
    @Override
    default Class<MessageManager> getManagerClass() {
        return MessageManager.class;
    }
    
    @Override
    default Class<Message> getEntityClass() {
        return Message.class;
    }
    
    @Override
    default Class<MessageBuilder> getBuilderClass() {
        return MessageBuilder.class;
    }
    
    @Override
    default Object get(Message entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "created" : return entity.getCreated();
            case "ipAddress" : return entity.getIpAddress();
            case "ipAddressName" : return entity.getIpAddressName();
            case "remotePort" : return entity.getRemotePort();
            case "gui" : return entity.getGui();
            case "coreFullVersion" : return entity.getCoreFullVersion();
            case "sessionId" : return entity.getSessionId();
            case "version" : return entity.getVersion();
            case "type" : return entity.getType();
            case "regId" : return entity.getRegId();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(MessageBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Long) value); break;
            case "created" : entity.setCreated((Timestamp) value); break;
            case "ipAddress" : entity.setIpAddress((String) value); break;
            case "ipAddressName" : entity.setIpAddressName((String) value); break;
            case "remotePort" : entity.setRemotePort((Integer) value); break;
            case "gui" : entity.setGui((String) value); break;
            case "coreFullVersion" : entity.setCoreFullVersion((String) value); break;
            case "sessionId" : entity.setSessionId((String) value); break;
            case "version" : entity.setVersion((String) value); break;
            case "type" : entity.setType((String) value); break;
            case "regId" : entity.setRegId((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static MessageManager get() {
        return Platform.get().get(ManagerComponent.class).manager(MessageManager.class);
    }
}