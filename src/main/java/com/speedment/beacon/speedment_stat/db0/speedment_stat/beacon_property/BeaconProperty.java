package com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon_property;

import com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon.Beacon;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon.BeaconField;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon.BeaconManager;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon_property_key.BeaconPropertyKey;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon_property_key.BeaconPropertyKeyField;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon_property_key.BeaconPropertyKeyManager;
import com.speedment.core.core.entity.Entity;
import com.speedment.core.exception.SpeedmentException;
import com.speedment.core.manager.metaresult.MetaResult;
import com.speedment.util.json.Json;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.beacon_property'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
@Entity(managerType = BeaconPropertyManager.class,
        builderType = BeaconPropertyBuilder.class,
        primaryKeyType = List.class)
public interface BeaconProperty {
    
    Long getBeacon();
    
    Integer getKey();
    
    Optional<String> getValue();
    
    default Beacon findBeacon() {
        return BeaconManager.get().stream()
            .filter(BeaconField.ID.equal(getBeacon()))
            .findAny().orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Beacon is set to " + getBeacon()
                ));
            
    }
    
    default BeaconPropertyKey findKey() {
        return BeaconPropertyKeyManager.get().stream()
            .filter(BeaconPropertyKeyField.ID.equal(getKey()))
            .findAny().orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. BeaconPropertyKey is set to " + getKey()
                ));
            
    }
    
    static BeaconPropertyBuilder builder() {
        return BeaconPropertyManager.get().builder();
    }
    
    default BeaconPropertyBuilder toBuilder() {
        return BeaconPropertyManager.get().toBuilder(this);
    }
    
    default String toJson() {
        return BeaconPropertyManager.get().toJson(this);
    }
    
    default String toJson(Json<BeaconProperty> json) {
        return json.build(this);
    }
    
    static Stream<BeaconProperty> stream() {
        return BeaconPropertyManager.get().stream();
    }
    
    default Optional<BeaconProperty> persist() {
        return BeaconPropertyManager.get().persist(this);
    }
    
    default Optional<BeaconProperty> update() {
        return BeaconPropertyManager.get().update(this);
    }
    
    default Optional<BeaconProperty> remove() {
        return BeaconPropertyManager.get().remove(this);
    }
    
    default Optional<BeaconProperty> persist(Consumer<MetaResult<BeaconProperty>> listener) {
        return BeaconPropertyManager.get().persist(this, listener);
    }
    
    default Optional<BeaconProperty> update(Consumer<MetaResult<BeaconProperty>> listener) {
        return BeaconPropertyManager.get().update(this, listener);
    }
    
    default Optional<BeaconProperty> remove(Consumer<MetaResult<BeaconProperty>> listener) {
        return BeaconPropertyManager.get().remove(this, listener);
    }
}