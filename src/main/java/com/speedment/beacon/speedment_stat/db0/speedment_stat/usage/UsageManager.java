package com.speedment.beacon.speedment_stat.db0.speedment_stat.usage;

import com.speedment.core.config.model.Column;
import com.speedment.core.config.model.Table;
import com.speedment.core.manager.sql.SqlManager;
import com.speedment.core.platform.Platform;
import com.speedment.core.platform.component.ManagerComponent;
import com.speedment.core.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.String;
import java.sql.Timestamp;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.usage'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface UsageManager extends SqlManager<Integer, Usage, UsageBuilder> {
    
    @Override
    default Integer primaryKeyFor(Usage entity) {
        return entity.getId();
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.speedment_stat.usage");
    }
    
    @Override
    default Class<UsageManager> getManagerClass() {
        return UsageManager.class;
    }
    
    @Override
    default Class<Usage> getEntityClass() {
        return Usage.class;
    }
    
    @Override
    default Class<UsageBuilder> getBuilderClass() {
        return UsageBuilder.class;
    }
    
    @Override
    default Object get(Usage entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "site" : return entity.getSite();
            case "artifact" : return entity.getArtifact();
            case "timeStamp" : return entity.getTimeStamp();
            case "count" : return entity.getCount();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(UsageBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Integer) value); break;
            case "site" : entity.setSite((String) value); break;
            case "artifact" : entity.setArtifact((String) value); break;
            case "timeStamp" : entity.setTimeStamp((Timestamp) value); break;
            case "count" : entity.setCount((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static UsageManager get() {
        return Platform.get().get(ManagerComponent.class).manager(UsageManager.class);
    }
}