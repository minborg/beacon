package com.speedment.beacon.speedment_stat.db0.speedment_stat.usage.impl;

import com.speedment.beacon.speedment_stat.db0.speedment_stat.usage.Usage;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.usage.UsageBuilder;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation  representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.usage'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public class UsageImpl implements UsageBuilder {
    
    private Integer id;
    private String site;
    private String artifact;
    private Timestamp timeStamp;
    private Integer count;
    
    public UsageImpl() {
        
    }
    
    public UsageImpl(final Usage usage) {
        setId(usage.getId());
        setSite(usage.getSite());
        usage.getArtifact().ifPresent(this::setArtifact);
        setTimeStamp(usage.getTimeStamp());
        usage.getCount().ifPresent(this::setCount);
    }
    
    @Override
    public Integer getId() {
        return id;
    }
    
    @Override
    public final UsageImpl setId(Integer id) {
        this.id = id;
        return this;
    }
    
    @Override
    public String getSite() {
        return site;
    }
    
    @Override
    public final UsageImpl setSite(String site) {
        this.site = site;
        return this;
    }
    
    @Override
    public Optional<String> getArtifact() {
        return Optional.ofNullable(artifact);
    }
    
    @Override
    public final UsageImpl setArtifact(String artifact) {
        this.artifact = artifact;
        return this;
    }
    
    @Override
    public Timestamp getTimeStamp() {
        return timeStamp;
    }
    
    @Override
    public final UsageImpl setTimeStamp(Timestamp timeStamp) {
        this.timeStamp = timeStamp;
        return this;
    }
    
    @Override
    public Optional<Integer> getCount() {
        return Optional.ofNullable(count);
    }
    
    @Override
    public final UsageImpl setCount(Integer count) {
        this.count = count;
        return this;
    }
    
    @Override
    public Usage build() {
        return new UsageImpl(this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("site = "+Objects.toString(getSite()));
        sj.add("artifact = "+Objects.toString(getArtifact().orElse(null)));
        sj.add("timeStamp = "+Objects.toString(getTimeStamp()));
        sj.add("count = "+Objects.toString(getCount().orElse(null)));
        return "UsageImpl "+sj.toString();
    }
}