package com.speedment.beacon.speedment_stat.db0.speedment_stat.message.impl;

import com.speedment.beacon.speedment_stat.db0.speedment_stat.message.Message;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.message.MessageBuilder;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;

/**
 * An implementation  representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.message'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public class MessageImpl implements MessageBuilder {
    
    private Long id;
    private Timestamp created;
    private String ipAddress;
    private String ipAddressName;
    private Integer remotePort;
    private String gui;
    private String coreFullVersion;
    private String sessionId;
    private String version;
    private String type;
    private String regId;
    
    public MessageImpl() {
        
    }
    
    public MessageImpl(final Message message) {
        setId(message.getId());
        setCreated(message.getCreated());
        setIpAddress(message.getIpAddress());
        message.getIpAddressName().ifPresent(this::setIpAddressName);
        setRemotePort(message.getRemotePort());
        message.getGui().ifPresent(this::setGui);
        message.getCoreFullVersion().ifPresent(this::setCoreFullVersion);
        message.getSessionId().ifPresent(this::setSessionId);
        message.getVersion().ifPresent(this::setVersion);
        message.getType().ifPresent(this::setType);
        message.getRegId().ifPresent(this::setRegId);
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    @Override
    public final MessageImpl setId(Long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Timestamp getCreated() {
        return created;
    }
    
    @Override
    public final MessageImpl setCreated(Timestamp created) {
        this.created = created;
        return this;
    }
    
    @Override
    public String getIpAddress() {
        return ipAddress;
    }
    
    @Override
    public final MessageImpl setIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    @Override
    public Optional<String> getIpAddressName() {
        return Optional.ofNullable(ipAddressName);
    }
    
    @Override
    public final MessageImpl setIpAddressName(String ipAddressName) {
        this.ipAddressName = ipAddressName;
        return this;
    }
    
    @Override
    public Integer getRemotePort() {
        return remotePort;
    }
    
    @Override
    public final MessageImpl setRemotePort(Integer remotePort) {
        this.remotePort = remotePort;
        return this;
    }
    
    @Override
    public Optional<String> getGui() {
        return Optional.ofNullable(gui);
    }
    
    @Override
    public final MessageImpl setGui(String gui) {
        this.gui = gui;
        return this;
    }
    
    @Override
    public Optional<String> getCoreFullVersion() {
        return Optional.ofNullable(coreFullVersion);
    }
    
    @Override
    public final MessageImpl setCoreFullVersion(String coreFullVersion) {
        this.coreFullVersion = coreFullVersion;
        return this;
    }
    
    @Override
    public Optional<String> getSessionId() {
        return Optional.ofNullable(sessionId);
    }
    
    @Override
    public final MessageImpl setSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }
    
    @Override
    public Optional<String> getVersion() {
        return Optional.ofNullable(version);
    }
    
    @Override
    public final MessageImpl setVersion(String version) {
        this.version = version;
        return this;
    }
    
    @Override
    public Optional<String> getType() {
        return Optional.ofNullable(type);
    }
    
    @Override
    public final MessageImpl setType(String type) {
        this.type = type;
        return this;
    }
    
    @Override
    public Optional<String> getRegId() {
        return Optional.ofNullable(regId);
    }
    
    @Override
    public final MessageImpl setRegId(String regId) {
        this.regId = regId;
        return this;
    }
    
    @Override
    public Message build() {
        return new MessageImpl(this);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "+Objects.toString(getId()));
        sj.add("created = "+Objects.toString(getCreated()));
        sj.add("ipAddress = "+Objects.toString(getIpAddress()));
        sj.add("ipAddressName = "+Objects.toString(getIpAddressName().orElse(null)));
        sj.add("remotePort = "+Objects.toString(getRemotePort()));
        sj.add("gui = "+Objects.toString(getGui().orElse(null)));
        sj.add("coreFullVersion = "+Objects.toString(getCoreFullVersion().orElse(null)));
        sj.add("sessionId = "+Objects.toString(getSessionId().orElse(null)));
        sj.add("version = "+Objects.toString(getVersion().orElse(null)));
        sj.add("type = "+Objects.toString(getType().orElse(null)));
        sj.add("regId = "+Objects.toString(getRegId().orElse(null)));
        return "MessageImpl "+sj.toString();
    }
}