package com.speedment.beacon.speedment_stat.db0.speedment_stat.beacon_property;

import com.speedment.core.config.model.Column;
import com.speedment.core.config.model.Table;
import com.speedment.core.manager.sql.SqlManager;
import com.speedment.core.platform.Platform;
import com.speedment.core.platform.component.ManagerComponent;
import com.speedment.core.platform.component.ProjectComponent;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.List;
import javax.annotation.Generated;

/**
 * A manager representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.beacon_property'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public interface BeaconPropertyManager extends SqlManager<List<?>, BeaconProperty, BeaconPropertyBuilder> {
    
    @Override
    default List<?> primaryKeyFor(BeaconProperty entity) {
        return Arrays.asList(entity.getBeacon(), entity.getKey());
    }
    
    @Override
    default Table getTable() {
        return Platform.get().get(ProjectComponent.class).getProject().findTableByName("db0.speedment_stat.beacon_property");
    }
    
    @Override
    default Class<BeaconPropertyManager> getManagerClass() {
        return BeaconPropertyManager.class;
    }
    
    @Override
    default Class<BeaconProperty> getEntityClass() {
        return BeaconProperty.class;
    }
    
    @Override
    default Class<BeaconPropertyBuilder> getBuilderClass() {
        return BeaconPropertyBuilder.class;
    }
    
    @Override
    default Object get(BeaconProperty entity, Column column) {
        switch (column.getName()) {
            case "beacon" : return entity.getBeacon();
            case "key" : return entity.getKey();
            case "value" : return entity.getValue();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    default void set(BeaconPropertyBuilder entity, Column column, Object value) {
        switch (column.getName()) {
            case "beacon" : entity.setBeacon((Long) value); break;
            case "key" : entity.setKey((Integer) value); break;
            case "value" : entity.setValue((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @SuppressWarnings("unchecked")
    static BeaconPropertyManager get() {
        return Platform.get().get(ManagerComponent.class).manager(BeaconPropertyManager.class);
    }
}