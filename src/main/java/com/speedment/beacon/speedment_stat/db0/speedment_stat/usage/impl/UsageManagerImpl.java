package com.speedment.beacon.speedment_stat.db0.speedment_stat.usage.impl;

import com.speedment.beacon.speedment_stat.db0.speedment_stat.usage.Usage;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.usage.UsageBuilder;
import com.speedment.beacon.speedment_stat.db0.speedment_stat.usage.UsageManager;
import com.speedment.core.exception.SpeedmentException;
import com.speedment.core.manager.sql.AbstractSqlManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.usage'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
public class UsageManagerImpl extends AbstractSqlManager<Integer, Usage, UsageBuilder> implements UsageManager {
    
    public UsageManagerImpl() {
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public UsageBuilder builder() {
        return new UsageImpl();
    }
    
    @Override
    public UsageBuilder toBuilder(Usage prototype) {
        return new UsageImpl(prototype);
    }
    
    protected Usage defaultReadEntity(ResultSet resultSet) {
        final UsageBuilder builder = builder();
        try {
            builder.setId(resultSet.getInt("id"));
            builder.setSite(resultSet.getString("site"));
            builder.setArtifact(getString(resultSet, "artifact"));
            builder.setTimeStamp(resultSet.getTimestamp("timeStamp"));
            builder.setCount(getInt(resultSet, "count"));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return builder;
    }
}