package com.speedment.beacon.speedment_stat.db0.speedment_stat.report;

import com.speedment.core.core.entity.Entity;
import com.speedment.core.manager.metaresult.MetaResult;
import com.speedment.util.json.Json;
import java.lang.Integer;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * An interface representing an entity (for example, a row) in the Table 'speedment_stat.db0.speedment_stat.report'.
 * <p>
 * This Class or Interface has been automatically generated by Speedment.
 * Any changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment 
 */
@Generated("Speedment")
@Entity(managerType = ReportManager.class,
        builderType = ReportBuilder.class,
        primaryKeyType = Integer.class)
public interface Report {
    
    Integer getId();
    
    String getTitle();
    
    String getSql();
    
    Optional<String> getChartUrl();
    
    Optional<Integer> getListOrder();
    
    static ReportBuilder builder() {
        return ReportManager.get().builder();
    }
    
    default ReportBuilder toBuilder() {
        return ReportManager.get().toBuilder(this);
    }
    
    default String toJson() {
        return ReportManager.get().toJson(this);
    }
    
    default String toJson(Json<Report> json) {
        return json.build(this);
    }
    
    static Stream<Report> stream() {
        return ReportManager.get().stream();
    }
    
    default Optional<Report> persist() {
        return ReportManager.get().persist(this);
    }
    
    default Optional<Report> update() {
        return ReportManager.get().update(this);
    }
    
    default Optional<Report> remove() {
        return ReportManager.get().remove(this);
    }
    
    default Optional<Report> persist(Consumer<MetaResult<Report>> listener) {
        return ReportManager.get().persist(this, listener);
    }
    
    default Optional<Report> update(Consumer<MetaResult<Report>> listener) {
        return ReportManager.get().update(this, listener);
    }
    
    default Optional<Report> remove(Consumer<MetaResult<Report>> listener) {
        return ReportManager.get().remove(this, listener);
    }
}